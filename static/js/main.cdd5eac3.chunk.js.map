{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","language","setLanguage","phrases","setPhrases","phrase","setPhrase","className","onClick","SwitchTransition","CSSTransition","key","addEndListener","node","done","addEventListener","classNames","in","unmountOnExit","undefined","array","newPhrases","length","playerParams","window","location","href","split","playerNum","parseInt","numPlayers","content","filter","p","i","getAllPhrases","newPhrase","splice","Math","floor","random","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"y+HAiEeA,EA/CH,WAAO,IAAD,EACgBC,mBAAS,MADzB,mBACTC,EADS,KACCC,EADD,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGYJ,qBAHZ,mBAGTK,EAHS,KAGDC,EAHC,KAchB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACb,4BAAQA,UAAU,aAAaC,QAZd,kBAAMN,EAAyB,OAAbD,EAAoB,KAAO,QAa9C,OAAbA,EAAoB,2BAAS,6BAGlC,yBAAKM,UAAU,QACb,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,IAAKN,GAAUA,EAAOJ,GACtBW,eAAgB,SAACC,EAAMC,GAAP,OAAgBD,EAAKE,iBAAiB,eAAgBD,GAAM,IAC5EE,WAAW,UAEX,uBAAGT,UAAU,UAAUF,GAAUA,EAAOJ,OAI9C,yBAAKM,UAAU,UACb,kBAACG,EAAA,EAAD,CACEO,GAAIZ,EACJO,eAAgB,SAACC,EAAMC,GAAP,OAAgBD,EAAKE,iBAAiB,eAAgBD,GAAM,IAC5EE,WAAW,SACXE,eAAa,GAEb,4BAAQX,UAAU,aAAaC,QA3BnB,kBAAMF,OAAUa,KA2B5B,WAEF,4BAAQZ,UAAU,aAAaC,QAnChB,WACnB,IAnBwBY,EAmBlBC,EAAalB,EAAQmB,OAAR,YAAqBnB,GAjBtB,WAAO,IAAD,EACpBoB,EAAY,UAAGC,OAAOC,SAASC,KAAKC,MAAM,KAAK,UAAnC,aAAG,EAAoCA,MAAM,KAC/D,GAA6B,KAAb,OAAZJ,QAAY,IAAZA,OAAA,EAAAA,EAAcD,QAAc,CAC9B,IAAMM,EAAYC,SAASN,EAAa,IAClCO,EAAaD,SAASN,EAAa,IACzC,OAAOQ,EAAQC,QAAO,SAACC,EAAGC,GAAJ,OAAUA,EAAIJ,EAAa,IAAMF,KAEzD,OAAO,YAAIG,GAU0CI,GAC7CC,GApBkBhB,EAoBcC,GApBCgB,OAAOC,KAAKC,MAAMnB,EAAME,OAASgB,KAAKE,UAAW,GAAG,GAqB3FlC,EAAU8B,GACVhC,EAAWiB,KA+BP,aC/CYoB,QACW,cAA7BjB,OAAOC,SAASiB,UAEe,UAA7BlB,OAAOC,SAASiB,UAEhBlB,OAAOC,SAASiB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cdd5eac3.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, { useState } from 'react';\nimport './App.css';\nimport content from './content.json';\nimport { SwitchTransition, CSSTransition } from 'react-transition-group';\n\nconst spliceRandomElement = array => array.splice(Math.floor(array.length * Math.random()), 1)[0];\n\nconst getAllPhrases = () => {\n  const playerParams = window.location.href.split('#')[1]?.split('/');\n  if (playerParams?.length === 2) {\n    const playerNum = parseInt(playerParams[0]);\n    const numPlayers = parseInt(playerParams[1]);\n    return content.filter((p, i) => i % numPlayers + 1 === playerNum);\n  }\n  return [...content];\n}\n\nconst App = () => {\n  const [language, setLanguage] = useState('fi');\n  const [phrases, setPhrases] = useState([]);\n  const [phrase, setPhrase] = useState();\n\n  const toggleLanguage = () => setLanguage(language === 'fi' ? 'en' : 'fi');\n  const getNewPhrase = () => {\n    const newPhrases = phrases.length ? [...phrases] : getAllPhrases();\n    const newPhrase = spliceRandomElement(newPhrases);\n    setPhrase(newPhrase);\n    setPhrases(newPhrases);\n  };\n  const clearPhrase = () => setPhrase(undefined);\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <button className=\"iconButton\" onClick={toggleLanguage}>\n          {language === 'fi' ? '🇫🇮' : '🇬🇧'}\n        </button>\n      </div>\n      <div className=\"main\">\n        <SwitchTransition>\n          <CSSTransition\n            key={phrase && phrase[language]}\n            addEndListener={(node, done) => node.addEventListener(\"animationend\", done, false)}\n            classNames=\"bouncy\"\n          >\n            <p className=\"phrase\">{phrase && phrase[language]}</p>\n          </CSSTransition>\n        </SwitchTransition>\n      </div>\n      <div className=\"footer\">\n        <CSSTransition\n          in={phrase}\n          addEndListener={(node, done) => node.addEventListener(\"animationend\", done, false)}\n          classNames=\"bouncy\"\n          unmountOnExit\n        >\n          <button className=\"iconButton\" onClick={clearPhrase}>❌</button>\n        </CSSTransition>\n        <button className=\"iconButton\" onClick={getNewPhrase}>✨</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}